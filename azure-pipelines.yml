variables:
  CIBW_BEFORE_BUILD: pip install pybind11==2.4.3
  #CIBW_TEST_COMMAND: TODO "python -c \"import tinyobjloader; tinyobjloader.test()\""
  CIBW_BUILD_VERBOSITY: "2"
  CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
  CIBW_MANYLINUX_I686_IMAGE: manylinux2014

jobs:
  - job: unit_linux
    pool: { vmImage: "ubuntu-latest" }
    steps:
      - script: |
          cd tests
          make && ./tester
        displayName: Run unit tests

  - job: python_format
    pool: { vmImage: "ubuntu-latest" }
    steps:
      - task: UsePythonVersion@0
      - script: |
          pip install black==19.10b0
          black --check python/
        displayName: Check Python code format

  - job: linux
    pool: {vmImage: "Ubuntu-16.04"}
    steps:
      - task: UsePythonVersion@0
      - bash: |
          python -m pip install --upgrade pip
          pip install cibuildwheel==1.1.0
          # Make the header files available to the build.
          cp *.h python
          cd python
          cibuildwheel --output-dir wheelhouse .
      - task: PublishBuildArtifacts@1
        inputs: {pathtoPublish: 'python/wheelhouse'}
        artifact: tinyobjDeployLinux

  - job: macos
    pool: {vmImage: 'macOS-10.15'}
    variables:
      # Support C++11: https://github.com/joerick/cibuildwheel/pull/156
      MACOSX_DEPLOYMENT_TARGET: 10.9
    steps:
      - task: UsePythonVersion@0
      - bash: |
          python -m pip install --upgrade pip
          pip install cibuildwheel==1.1.0
          # Make the header files available to the build.
          cp *.h python
          cd python
          cibuildwheel --output-dir wheelhouse .
      - task: PublishBuildArtifacts@1
        inputs: {pathtoPublish: 'python/wheelhouse'}
        artifact: tinyobjDeployMacOS

  - job: windows
    pool: {vmImage: 'vs2017-win2016'}
    steps:
      - task: UsePythonVersion@0
      - script: choco install vcpython27 -f -y
        displayName: Install Visual C++ for Python 2.7
      - bash: |
          python -m pip install --upgrade pip
          pip install cibuildwheel==1.1.0
          # Make the header files available to the build.
          cp *.h python
          cd python
          cibuildwheel --output-dir wheelhouse .
      - task: PublishBuildArtifacts@1
        inputs: {pathtoPublish: 'python/wheelhouse'}
        artifact: tinyobjDeployWindows

 - job: deployPyPI
   # Based on vispy: https://github.com/vispy/vispy/blob/master/azure-pipelines.yml
   pool: {vmImage: 'Ubuntu-16.04'}
   condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
   dependsOn:
     - linux
     - macos
     - windows
   steps:
     - task: UsePythonVersion@0
     - task: DownloadPipelineArtifact@2
       inputs:
         patterns: |
           tinyobjDeployLinux/*
           tinyobjDeployMacOS/*.whl
           tinyobjDeployWindows/*.whl
     - bash: |
         cd $(Pipeline.Workspace)/python
         python -m pip install --upgrade pip
         pip install twine
         twine upload -u "__token__" --skip-existing vispyDeployLinux/* vispyDeployMacOS/* vispyDeployWindows/*
       env:
         TWINE_PASSWORD: $(pypiToken2)

trigger:
  - master

pr:
  branches:
    include:
      - "*"
